#include<iostream>using namespace std;//单链表节点//struct Node {//	int data;//	Node* next;//	//Node() :data(0), next(nullptr) {}//默认构造函数,默认数据是0//	Node(int val = 0) : data(val), next(nullptr) {} // 添加带参数的构造函数//};//节点类型////代码实现//class Clink {//public://	Node* head_;//这是头节点，哨兵节点//	Clink()//	{//		//head初始化指向头节点//		head_ = new Node();//开辟内存//	}//	~Clink()//这才是析构函数,要把每一个节点都删除//	{//		Node* tmp = head_;//		while (tmp)//		{//			Node* cur = tmp->next;//			delete tmp;//			tmp = cur;//		}//		head_ = nullptr;//	}//	//尾插//	void PushBack(int val)//	{//		Node* new_node = new Node(val);//开辟新的节点//		//单链表节点//		//找到尾节点//		Node* tmp = head_;//		while (tmp->next)//		{//			tmp = tmp->next;//		}//		//找到尾部//		tmp->next = new_node;////	}//	//头插//	void PushFront(int val)//	{////		Node* tmp = new Node(val);//		tmp->next = head_->next;//		head_->next = tmp;////	}//	//尾删//	//头删////	//打印//	void Show()//	{//		Node* p = head_->next;//		while (p) {//			cout << p->data << " ";//			p = p->next;//		}//	}//};////int main()//{//	Clink p;//	for (int i = 0; i < 10; i++)//	{//		p.PushBack(i);//	}//	p.PushFront(100);//	p.Show();////	return 0;//}//单链表逆序